"use strict";(new XMLHttpRequest).responseType="json",window.Backend=function(){this.xhr2=new XMLHttpRequest,this.xhr2.responseType="json"},Backend.prototype.saveData=function(e,n,t,l){this.xhr2.addEventListener("load",function(){200===this.status?t(this.response):l("server status: "+this.status+" "+this.statusText)}),this.xhr2.open("POST",e,!0),this.xhr2.send(n),console.log(n)},function(){var e=new window.Backend,n=document.querySelector(".form__btn"),t=function(e){document.querySelector(".form__body").style.display="none";var n=document.createElement("div");n.classList.add("msg-ok"),n.innerHTML='<img src="img/success.png"><p>Your message send!</p>',document.querySelector(".form__content").appendChild(n)},l=function(e){console.log(e)};n.addEventListener("click",function(a){if(a.preventDefault(),window.validClass.checkEmpty(document.querySelectorAll(".required")),grecaptcha.getResponse()){if(window.validClass.checkEmpty(document.querySelectorAll(".required"))&&window.validClass.checkEmail(document.querySelector("#email"))){var i={name:document.querySelector("#name").value,mail:document.querySelector("#email").value,message:document.querySelector("#message").value};n.innerHTML='<div class="windows8">\n<div class="wBall" id="wBall_1">\n<div class="wInnerBall"></div>\n</div><div class="wBall" id="wBall_2"><div class="wInnerBall"></div></div><div class="wBall" id="wBall_3">\n<div class="wInnerBall"></div>\n</div>\n<div class="wBall" id="wBall_4">\n<div class="wInnerBall"></div>\n</div>\n<div class="wBall" id="wBall_5">\n<div class="wInnerBall"></div>\n</div>\n</div>',n.style.padding="9px 37px",n.setAttribute("disabled",""),e.saveData("http://api.intelligenthookah.com/serv.php",JSON.stringify(i),t,l)}}else{var s=document.createElement("div");s.classList.add("err-captcha"),s.innerText="Captcha is empty!",document.querySelector(".capcha__wrap").appendChild(s),setTimeout(function(){document.querySelector(".capcha__wrap").removeChild(s)},1e3)}})}(),function(){var e=function(){this.data={}};e.prototype.checkEmail=function(e){if(!/\S+@\S+\.\S+/.test(e.value)){var n=document.createElement("div");return n.classList.add("err-input"),n.innerText="Error email!",e.parentElement.appendChild(n),setTimeout(function(){e.parentElement.removeChild(n)},1e3),!1}return!0},e.prototype.numberInput=function(){(event.keyCode<48||event.keyCode>57)&&(event.returnValue=!1)},e.prototype.checkPhone=function(e){console.log(e),console.log(e.value),e.value=e.value.replace(/[^0-9]/g,"")},e.prototype.checkEmpty=function(e){var n=[];return e.forEach(function(e){var n=e.parentElement.children;if(e.value){if(e.parentElement.hasChildNodes()){console.log(n);for(var t=0;t<n.length;t++)n[t].classList.contains("err-input")&&(console.log(n[t]),console.log(n),n[t].remove())}}else{for(var l=0;l<n.length;l++)n[l].classList.contains("err-input")&&(console.log(n[l]),console.log(n),n[l].remove());var a=document.createElement("div");a.classList.add("err-input"),a.innerText="Input is Empty!",e.parentElement.appendChild(a),setTimeout(function(){e.parentElement.removeChild(a)},1e3)}}),e.forEach(function(e){e.value||n.push(e)}),!n.length},window.validClass=new e}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
